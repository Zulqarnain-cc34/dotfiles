import subprocess
import os
import operator
import re
import typing
from urllib.parse import urljoin

from qutebrowser.api import interceptor, message
from PyQt5.QtCore import QUrl

# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html
# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()
# config.load_autoconfig()
# Or uncomment this line to load settings from config.py
config.load_autoconfig(False)
# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {
    'q': 'quit',
    'w': 'session-save',
    'wq': 'quit --save',
    'x': 'quit --save'
}
# Setting dark mode
config.set("colors.webpage.darkmode.enabled", True)

# lazy load on startup
config.set("session.lazy_restore",True)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'no-3rdparty')
# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent',
           'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0',
           'https://drive.google.com/*')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
#config.set('content.notifications.enabled', True, 'https://www.reddit.com')

# default zoom
config.set("zoom.default", 125)

c.auto_save.session = True
c.content.pdfjs = False
c.content.geolocation = False
c.content.javascript.enabled = False
c.content.webgl = False
c.content.canvas_reading = True
config.set('content.autoplay', False)

###############################################################################
#   __ _ _            _      _             
#  / _(_) | ___ _ __ (_) ___| | _____ _ __ 
# | |_| | |/ _ \ '_ \| |/ __| |/ / _ \ '__|
# |  _| | |  __/ |_) | | (__|   <  __/ |
# |_| |_|_|\___| .__/|_|\___|_|\_\___|_|
#              |_|                        
###############################################################################
# Using zenity as file picker

# config.set('fileselect.handler', 'external')
# config.set('fileselect.folder.command',
#            ["zenity", "--file-selection", "--directory"])
# config.set('fileselect.multiple_files.command',
#            ["zenity", "--file-selection", "--multiple"])
# config.set('fileselect.single_file.command', ["zenity", "--file-selection"])
# Using lf as file picker
####################
HOME = os.environ['HOME']
####################
config.set('fileselect.handler', 'external')
config.set('fileselect.folder.command',
           [f"{HOME}/.config/qutebrowser/filepicker"])
config.set('fileselect.multiple_files.command',
           [f"{HOME}/.config/qutebrowser/filepicker"])
config.set('fileselect.single_file.command',
           [f"{HOME}/.config/qutebrowser/filepicker"])
###############################################################################

config.set('content.javascript.enabled', True, '*://aidoru-online.me/*')
config.set('content.javascript.enabled', True, '*://boards.4chan.org/*')
config.set('content.javascript.enabled', True, '*://boards.4channel.org/*')
config.set('content.javascript.enabled', True, '*://www.showroom-live.com/*')
config.set('content.javascript.enabled', True,
           '*://campaign.showroom-live.com/*')
config.set('content.javascript.enabled', True, '*://localhost/*')
config.set('content.javascript.enabled', True, '*://localhost:*/*')
config.set('content.javascript.enabled', True,
           'file:///home/wasif/build/other-projects/Bento/index.html')
config.set('content.javascript.enabled', True, '*://gitlab.com/*')
config.set('content.javascript.enabled', True, '*://github.com/*')
config.set('content.javascript.enabled', True, '*://invidious.kavin.rocks/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')
# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')
# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')
# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')
# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')
# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')
# homepage
# c.url.start_pages = ["about:blank"]
# c.url.default_page = "about:blank"

# fork new tabs to the background, rather than following them
# c.tabs.background = True

# only show the tab bar if there are multiple tabs
# c.tabs.show = 'multiple'

# only show the statusbar if in a mode
# c.statusbar.show = 'in-mode'

# various delays
c.tabs.show_switching_delay = 2000
c.messages.timeout = 5000
c.keyhint.delay = 0

# default text editor
c.editor.command = ['alacritty', '-e', 'nvim', '{file}']
c.editor.encoding = 'utf-8'

# use the new ad-blocker
c.content.blocking.method = 'both'

# allow desktop notifications
c.content.notifications.enabled = False

# default character encoding
c.content.default_encoding = 'utf-8'

# Directory to save downloads to. If unset, a sensible OS-specific
# default is used.
# Type: Directory
c.downloads.location.directory = "~/Downloads"
c.downloads.location.suggestion = 'both'
# When to show the tab bar.
# Type: String
# Valid values:
#   - always: Always show the tab bar.
#   - never: Always hide the tab bar.
#   - multiple: Hide the tab bar if only one tab is open.
#   - switching: Show the tab bar when switching tabs.
c.tabs.show = 'always'
# Setting default page for when opening new tabs or new windows with
# commands like :open -t and :open -w .
c.url.default_page = 'file:///home/wasif/build/other-projects/Bento/index.html'
# Search engines which can be used via the address bar.  Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` braces.  The following further
# placeholds are defined to configure how special characters in the
# search terms are replaced by safe characters (called 'quoting'):  *
# `{}` and `{semiquoted}` quote everything except slashes; this is the
# most   sensible choice for almost all search engines (for the search
# term   `slash/and&amp` this placeholder expands to `slash/and%26amp`).
# * `{quoted}` quotes all characters (for `slash/and&amp` this
# placeholder   expands to `slash%2Fand%26amp`). * `{unquoted}` quotes
# nothing (for `slash/and&amp` this placeholder   expands to
# `slash/and&amp`).  The search engine named `DEFAULT` is used when
# `url.auto_search` is turned on and something else than a URL was
# entered to be opened. Other search engines can be used by prepending
# the search engine name to the search term, e.g. `:open google
# qutebrowser`.
# Type: Dict
c.url.searchengines = {
    'DEFAULT': 'https://searx.be/?q={}',
    'am': 'https://www.amazon.com/s?k={}',
    'aw': 'https://wiki.archlinux.org/?search={}',
    'goog': 'https://www.google.com/search?q={}',
    'd': 'https://www.duckduckgo.com/?q={}',
    'hoog': 'https://hoogle.haskell.org/?hoogle={}',
    're': 'https://www.reddit.com/r/{}',
    'ub': 'https://www.urbandictionary.com/define.php?term={}',
    'wiki': 'https://en.wikipedia.org/wiki/{}',
    'yt': 'https://invidious.kavin.rocks/results?search_query={}',
    'red': 'https://searx.be/?q={}+site%3Areddit.com',
}

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
# Type: List of QtColor, or QtColor
# c.colors.completion.fg = ['#9cc4ff', 'white', 'white']
# Background color of the completion widget for odd rows.
## Type: QssColor
# c.colors.completion.odd.bg = '#1c1f24'
# Background color of the completion widget for even rows.
## Type: QssColor
# c.colors.completion.even.bg = '#232429'
# Foreground color of completion widget category headers.
## Type: QtColor
# c.colors.completion.category.fg = '#e1acff'
# Background color of the completion widget category headers.
## Type: QssColor
# c.colors.completion.category.bg = 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #000000, stop:1 #232429)'
# Top border color of the completion widget category headers.
## Type: QssColor
# c.colors.completion.category.border.top = '#3f4147'
# Bottom border color of the completion widget category headers.
## Type: QssColor
# c.colors.completion.category.border.bottom = '#3f4147'
# Foreground color of the selected completion item.
## Type: QtColor
# c.colors.completion.item.selected.fg = '#282c34'
# Background color of the selected completion item.
## Type: QssColor
# c.colors.completion.item.selected.bg = '#ecbe7b'
# Foreground color of the matched text in the selected completion item.
## Type: QtColor
# c.colors.completion.item.selected.match.fg = '#c678dd'
# Foreground color of the matched text in the completion.
## Type: QtColor
# c.colors.completion.match.fg = '#c678dd'
# Color of the scrollbar handle in the completion view.
## Type: QssColor
#c.colors.completion.scrollbar.fg = 'white'
# Background color for the download bar.
## Type: QssColor
# c.colors.downloads.bar.bg = '#282c34'
# Background color for downloads with errors.
## Type: QtColor
# c.colors.downloads.error.bg = '#ff6c6b'
# Font color for hints.
## Type: QssColor
# c.colors.hints.fg = '#282c34'
# Font color for the matched part of hints.
## Type: QtColor
# c.colors.hints.match.fg = '#98be65'
# Background color of an info message.
## Type: QssColor
# c.colors.messages.info.bg = '#282c34'
# Background color of the statusbar.
## Type: QssColor
# c.colors.statusbar.normal.bg = '#282c34'
# Foreground color of the statusbar in insert mode.
## Type: QssColor
#c.colors.statusbar.insert.fg = 'white'
# Background color of the statusbar in insert mode.
## Type: QssColor
# c.colors.statusbar.insert.bg = '#497920'
# Background color of the statusbar in passthrough mode.
## Type: QssColor
# c.colors.statusbar.passthrough.bg = '#34426f'
# Background color of the statusbar in command mode.
## Type: QssColor
# c.colors.statusbar.command.bg = '#282c34'
# Foreground color of the URL in the statusbar when there's a warning.
## Type: QssColor
#c.colors.statusbar.url.warn.fg = 'yellow'
# Background color of the tab bar.
## Type: QssColor
# c.colors.tabs.bar.bg = '#1c1f34'
# Background color of unselected odd tabs.
## Type: QtColor
# c.colors.tabs.odd.bg = '#282c34'
# Background color of unselected even tabs.
## Type: QtColor
# c.colors.tabs.even.bg = '#282c34'
# Background color of selected odd tabs.
## Type: QtColor
# c.colors.tabs.selected.odd.bg = '#282c34'
# Background color of selected even tabs.
## Type: QtColor
# c.colors.tabs.selected.even.bg = '#282c34'
# Background color of pinned unselected odd tabs.
## Type: QtColor
#c.colors.tabs.pinned.odd.bg = 'seagreen'
# Background color of pinned unselected even tabs.
## Type: QtColor
#c.colors.tabs.pinned.even.bg = 'darkseagreen'
# Background color of pinned selected odd tabs.
## Type: QtColor
# c.colors.tabs.pinned.selected.odd.bg = '#282c34'
# Background color of pinned selected even tabs.
## Type: QtColor
# c.colors.tabs.pinned.selected.even.bg = '#282c34'

# Default font families to use. Whenever "default_family" is used in a
# font setting, it's replaced with the fonts listed here. If set to an
# empty value, a system-specific monospace default is used.
# Type: List of Font, or Font
c.fonts.default_family = '"Ubuntu Mono Nerd Font"'
# Default font size to use. Whenever "default_size" is used in a font
# setting, it's replaced with the size listed here. Valid values are
# either a float value with a "pt" suffix, or an integer value with a
# "px" suffix.
# Type: String
c.fonts.default_size = '11pt'
# Font used in the completion widget.
# Type: Font
c.fonts.completion.entry = '11pt "Ubuntu Mono Nerd Font"'
# Font used for the debugging console.
# Type: Font
c.fonts.debug_console = '11pt "Ubuntu Mono Nerd Font"'
# Font used for prompts.
# Type: Font
c.fonts.prompts = 'default_size sans-serif'
# Font used in the statusbar.
# Type: Font
c.fonts.statusbar = '11pt "Ubuntu Mono Nerd Font"'
# Bindings to use dmenu rather than qutebrowser's builtin search.

# Bindings for cycling through CSS stylesheets from Solarized Everything CSS:
# https://github.com/alphapapa/solarized-everything-css
config.bind(
    ',ap',
    'config-cycle content.user_stylesheets ~/.config/qutebrowser/themes/css/apprentice/apprentice-all-sites.css ""'
)
config.bind(
    ',dr',
    'config-cycle content.user_stylesheets ~/.config/qutebrowser/themes/css/darculized/darculized-all-sites.css ""'
)
config.bind(
    ',gr',
    'config-cycle content.user_stylesheets ~/.config/qutebrowser/themes/css/gruvbox/gruvbox-all-sites.css ""'
)
config.bind(
    ',sd',
    'config-cycle content.user_stylesheets ~/.config/qutebrowser/themes/css/solarized-dark/solarized-dark-all-sites.css ""'
)
config.bind(
    ',sl',
    'config-cycle content.user_stylesheets ~/.config/qutebrowser/themes/css/solarized-light/solarized-light-all-sites.css ""'
)

# ======================= Redline Insert Mode ============= {{{
# Awesome way to open vim from qutebrowser
# c.editor.command = [
#    os.environ["TERMINAL"],
#    "-e",
#    os.environ["EDITOR"],
#    "-f",
#    "{file}",
#    "-c",
#    "normal {line}G{column0}1",
# ]

config.bind("<Ctrl-h>", "fake-key <Backspace>", "insert")
config.bind("<Ctrl-a>", "fake-key <Home>", "insert")
config.bind("<Ctrl-e>", "fake-key <End>", "insert")
config.bind("<Ctrl-b>", "fake-key <Left>", "insert")
config.bind("<Mod1-b>", "fake-key <Ctrl-Left>", "insert")
config.bind("<Ctrl-f>", "fake-key <Right>", "insert")
config.bind("<Mod1-f>", "fake-key <Ctrl-Right>", "insert")
config.bind("<Ctrl-p>", "fake-key <Up>", "insert")
config.bind("<Ctrl-n>", "fake-key <Down>", "insert")
config.bind("<Mod1-d>", "fake-key <Ctrl-Delete>", "insert")
config.bind("<Ctrl-d>", "fake-key <Delete>", "insert")
config.bind("<Ctrl-w>", "fake-key <Ctrl-Backspace>", "insert")
config.bind("<Ctrl-u>", "fake-key <Shift-Home><Delete>", "insert")
config.bind("<Ctrl-k>", "fake-key <Shift-End><Delete>", "insert")
config.bind("<Ctrl-x><Ctrl-e>", "edit-text", "insert")
config.bind("<Ctrl-i>", "edit-text", "insert")

config.bind("gF", 'view-source --edit')
# }}}

config.bind('xb', 'config-cycle statusbar.show always never')
config.bind('xt', 'config-cycle tabs.show always never')
config.bind(
    'xx',
    'config-cycle statusbar.show always never;; config-cycle tabs.show always never'
)

# bindings
# open link using external application
config.bind("A", 'hint links spawn urlportal.sh {hint-url}')
# open link using external application
config.bind("aa", 'spawn urlportal.sh {url}')
# send link to android
config.bind("ak", 'spawn kdeconnect-handler {url}')

# send link to android
config.bind("ya", 'mode-enter caret ;; selection-toggle ;; move-to-end-of-document')

# config source
config.bind("cs", 'config-source')

# readability
config.bind("R", 'spawn --userscript readability')

# open link in internet archive
config.bind("wa", 'open https://web.archive.org/web/{url}')
config.bind(";wa",
            'hint links fill :open -t https://web.archive.org/web/{hint-url}')

# download locations
config.bind("gd", 'set downloads.location.directory ~/Downloads ; download')
config.bind(
    ";ls",
    'set downloads.location.directory ~/Pictures/Iwatate-Saho/ ; links download'
)
###############################################################################
#              _ _               _
# _ __ ___  __| (_)_ __ ___  ___| |_
# | '__/ _ \/ _` | | '__/ _ \/ __| __|
# | | |  __/ (_| | | | |  __/ (__| |_
# |_|  \___|\__,_|_|_|  \___|\___|\__|
###############################################################################

# Any return value other than a literal 'False' means we redirected
REDIRECT_MAP = {
    "reddit.com": operator.methodcaller('setHost', 'www.teddit.net'),
    "www.reddit.com": operator.methodcaller('setHost', 'www.teddit.net'),
    "twitter.com": operator.methodcaller('setHost', 'nitter.42l.fr'),
    "www.twitter.com": operator.methodcaller('setHost', 'nitter.42l.fr'),
    "youtube.com": operator.methodcaller('setHost', 'invidious.kavin.rocks'),
    "www.youtube.com": operator.methodcaller('setHost', 'invidious.kavin.rocks'),
    "instagram.com": operator.methodcaller('setHost',
                                           'bibliogram.snopyta.org'),
    "www.instagram.com": operator.methodcaller('setHost',
                                               'bibliogram.snopyta.org')
}  # type: typing.Dict[str, typing.Callable[..., typing.Optional[bool]]]


def int_fn(info: interceptor.Request):
    """Block the given request if necessary."""
    if (info.resource_type != interceptor.ResourceType.main_frame
            or info.request_url.scheme() in {"data", "blob"}):
        return
    url = info.request_url
    redir = REDIRECT_MAP.get(url.host())
    if redir is not None and redir(url) is not False:
        message.info("Redirecting to " + url.toString())
        info.redirect(url)


interceptor.register(int_fn)
###############################################################################
config.set(
    "content.user_stylesheets",
    "~/.config/qutebrowser/themes/css/apprentice/apprentice-all-sites.css")
# kde environment
os.environ['QT_QPA_PLATFORMTHEME'] = 'kde'
###############################################################################
